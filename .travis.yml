#
# CI Hello World
#
# Copyright (C) 2017 Assured Information Security, Inc.
# Author: Rian Quinn        <quinnr@ainfosec.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# Configuration
#
language: cpp
dist: trusty

git:
  quiet: true

cache:
  directories:
    - "$HUNTER_ROOT"
#
# Tokens
#
env:
  global:
   - secure: "kZvyN+SKlPa38/rnue/M4ft/lf1jzD5Y7Oy5jqmt7f4L1QEM4WSSyI7rnYxgMGQLrsdxlntEQIm1iwDt7JRQFsqok2oqr45GkZrTP9pj7fh07rKmmONm9mQdjD47zIVhR4Kt/0Feyk9RV1w0lNACb6Az+LaAcUXN9Mxrs56ExCcFKT1vnH1gCHyLPIPojfxGdaPBQuCXmOdJdEFRwG+jBmQWyHh0ezgmODtUW05FzqqGZF+xJSwW/bbvQsCIK+ugSnDppwWHtU4uqVpZwPkjj9dARaPEv+scpRlyvSpqOzybgGS6NtuLq49g0vlZkplX8znlzFMbZQ+fNP/zUtQWYX3X9hfU/bW+7yVHOmtCZi+2LE3vipatybytAt/caMqddPgOfR4xpbn31N3wuyx+e8VcGEYc20dQTshrZeCv24entE/g8k7gJKeSJKSoK9EBh9upGAWF27PNdtRTv6GoxSq5UbAJ2tXz+wbkAr8VZt3PeZkhH9sB6nC+TeDf5M1ZX3h7u6ykMY1i9nG9MfvaKJC1zTZ1YkoZco0DvB8RIU5nBOcEPuX2JnECrTvEWToPggntyG5Nuq7bW8kYxRt3o/Vxlw4/2ZRT1ax1N+uuvZ/8aannTuVn1XfifKO3p3KYvX5TSQ3OAODFSB1LFPZbZQT6PNhoed4sGDvnhEdoZyU="

before_install:
  - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

   #
# Build Dependencies
#
before_script:

  #
  # Build Folder
  #
  - mkdir build
  - cd build

  #
  # Update / Install CMake
  #
  - |
    mkdir -p external/cmake
    pushd external/cmake
    CMAKE_FTP="https://cmake.org/files/v3.14/cmake-3.14.5"
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
        wget ${CMAKE_FTP}-Linux-x86_64.sh
        chmod +x cmake-*-Linux-x86_64.sh
        ./cmake-*-Linux-x86_64.sh --exclude-subdir --skip-license
        export PATH="${PWD}/bin:$PATH"
    else
        curl ${CMAKE_FTP}-Darwin-x86_64.tar.gz -O
        tar -xzf cmake-*-Darwin-x86_64.tar.gz
        pushd cmake-*-Darwin-x86_64
        sudo CMake.app/Contents/bin/cmake-gui --install
        export PATH="${PWD}/CMake.app/Contents/bin:$PATH"
        popd
    fi
    popd
    
  #
  # Pipefail + functions definitions
  #
  - echo "set +o pipefail" >> ~/.bashrc
  - source ~/.bashrc
  - |
    checkForErrorOrWarningAndPrintIfAny() {
        local filename="$1"
        if [[ -n $(grep -i "warning: |error: " "$filename") ]]; then
            echo "There are some errors/warning in the ${filename}:"
            cat "$filename"
            exit -1
        fi
    }

#
# Build Matrix
#
matrix:
  include:

  #
  # Doxygen
  #
  - os: linux
    env:
      - TEST="Doxygen"
    addons:
      apt:
        packages:
          - doxygen
    script:
      - cd ..
      - doxygen .doxygen.txt
      - |
        if [[ -s doxygen_warnings.txt ]]; then
          echo "You must fix doxygen before submitting a pull request"
          echo ""
          cat doxygen_warnings.txt
          exit -1
        fi

  #
  # Trailing whitespaces check
  #
  - os: linux
    env:
      - TEST="Trailing whitespaces check"
    script:
      - |
        if [[ -n $(git diff --check HEAD^) ]]; then
          echo "You must remove whitespace before submitting a pull request"
          echo ""
          git diff --check HEAD^
          exit -1
        fi

  #
  # Astyle Format
  #
  - os: linux
    env:
      - TEST="Astyle Format"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - g++-9
    script:
      - |
        cmake -DENABLE_ASTYLE=ON -DCMAKE_CXX_COMPILER="g++-9" ..
        make
        make format
      - |
        if [[ -n $(git diff) ]]; then
          echo "You must run make format before submitting a pull request"
          echo ""
          git diff
          exit -1
        fi

  #
  # Clang Tidy
  #
  - os: linux
    env:
      - TEST="Clang Tidy"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-8
        packages:
          - clang-8
          - clang-tidy-8
          - gcc-9
          - g++-9
    script:
      - |
        cmake -DENABLE_CLANG_TIDY=ON -DCMAKE_CXX_COMPILER="g++-9" ..
        make
        make tidy | tee output.txt
      - checkForErrorOrWarningAndPrintIfAny output.txt

  #
  # CppCheck
  #
  - os: linux
    env:
      - TEST="CppCheck"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - g++-9
    script:
      - |
        cmake -DENABLE_CPPCHECK=ON -DCMAKE_CXX_COMPILER="g++-9" ..
        make
      - make check

  #
  # Coverity Scan
  #
  - os: linux
    env:
      - TEST="Coverity Scan"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - g++-9
      coverity_scan:
        project:
          name: "ainfosec/spacey"
          description: "A simple example of how to setup a complete CI environment for C and C++"
        notification_email: rianquinn@gmail.com
        build_command_prepend: "cmake -DCMAKE_CXX_COMPILER=g++-9 .."
        build_command: "make"
        branch_pattern: master
    script:
      - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

  #
  # Codecov
  #
  - os: linux
    env:
      - TEST="Codecov"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - g++-9
    script:
      - |
        cmake -DENABLE_COVERAGE=ON -DCMAKE_CXX_COMPILER="g++-9" ..
        make
        make test
        cd ..
      - bash <(curl -s https://codecov.io/bash)

  #
  # Coveralls
  #
  - os: linux
    env:
      - TEST="Coveralls"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - g++-9
    script:
      - |
        pip install --upgrade --user git+git://github.com/eddyxu/cpp-coveralls.git
        cmake -DENABLE_COVERAGE=ON -DCMAKE_CXX_COMPILER="g++-9" ..
        make
        make test
        cd ..
      - |
        coveralls --build-root build --gcov-options '\-lp' \
          -e build/external \
          -e build/include \
          -e build/CMakeFiles/3.8.0 \
          -e build/CMakeFiles/feature_tests.c \
          -e build/CMakeFiles/feature_tests.cxx

  #
  # Google Address Sanitizer
  #
  - os: linux
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - g++-9
    env:
      - TEST="Google Address Sanitizer"
    script:
      - |
        cmake -DENABLE_ASAN=ON -DCMAKE_CXX_COMPILER="g++-9" ..
        make
      - make test

  #
  # Google Undefined Sanitizer
  #
  - os: linux
    env:
      - TEST="Google Undefined Sanitizer"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - g++-9
    script:
      - |
        cmake -DENABLE_USAN=ON -DCMAKE_CXX_COMPILER="g++-9" ..
        make
      - make test

  #
  # Google Thread Sanitizer
  #
  - os: linux
    env:
      - TEST="Google Thread Sanitizer"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - g++-9
    script:
      - |
        cmake -DENABLE_TSAN=ON -DCMAKE_CXX_COMPILER="g++-9" ..
        make
      - make test

  #
  # Valgrind
  #
  - os: linux
    env:
      - TEST="Valgrind"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - g++-9
          - valgrind
    script:
      - |
        cmake -DCMAKE_CXX_COMPILER="g++-9" ..
        make
      - ctest -T memcheck

  #
  # G++ 8
  #
  - os: linux
    env:
      - TEST="G++ 8"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-8
          - g++-8
    script:
      - |
        cmake -DCMAKE_CXX_COMPILER="g++-8" ..
        make | tee output.txt
      - checkForErrorOrWarningAndPrintIfAny output.txt
      - make test

  #
  # G++ 9
  #
  - os: linux
    env:
      - TEST="G++ 9"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - g++-9
    script:
      - |
        cmake -DCMAKE_CXX_COMPILER="g++-9" ..
        make | tee output.txt
      - checkForErrorOrWarningAndPrintIfAny output.txt
      - make test

  #
  # Clang 8
  #
  - os: linux
    env:
      - TEST="Clang 8"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-8
        packages:
          - clang-8
          - gcc-9
          - g++-9
    script:
      - |
        cmake -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 ..
        make | tee output.txt
      - checkForErrorOrWarningAndPrintIfAny output.txt
      - make test

  #
  # XCode 10.2.1
  #
  - os: osx
    env:
      - TEST="XCode 10.2.1"
    osx_image: xcode10.2.1
    script:
      - |
        cmake ..
        make | tee output.txt
      - checkForErrorOrWarningAndPrintIfAny output.txt
      - make test
